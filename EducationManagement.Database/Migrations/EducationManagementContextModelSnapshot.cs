// <auto-generated />
using EducationManagement.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace EducationManagement.Database.Migrations
{
    [DbContext(typeof(EducationManagementContext))]
    partial class EducationManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationManagement.Database.Models.File", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int>("FileTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.FileType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Group", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LevelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("StudentMax");

                    b.Property<int>("StudentMin");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "LevelId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Level", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("MinEntryTaskScore");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("RoleId");

                    b.Property<string>("RoleId1");

                    b.HasKey("Id");

                    b.HasIndex("RoleId1");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Role", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<bool>("IsManageable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.StudentGroup", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<int>("GroupId");

                    b.HasKey("StudentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.StudentTask", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<int>("TaskId");

                    b.Property<int?>("Score");

                    b.HasKey("StudentId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("StudentTask");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Subject", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.SubjectLevel", b =>
                {
                    b.Property<int>("SubjectId");

                    b.Property<int>("LevelId");

                    b.Property<int?>("EntryTaskId");

                    b.Property<int>("Price");

                    b.HasKey("SubjectId", "LevelId");

                    b.HasIndex("EntryTaskId");

                    b.HasIndex("LevelId");

                    b.ToTable("SubjectLevel");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.SubjectLevelFile", b =>
                {
                    b.Property<int>("SubjectId");

                    b.Property<int>("LevelId");

                    b.Property<int>("FileId");

                    b.HasKey("SubjectId", "LevelId", "FileId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("LevelId", "SubjectId");

                    b.ToTable("SubjectLevelFile");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Task", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("CanReattend");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Duration")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ScoreMax");

                    b.Property<int>("TaskTypeId");

                    b.Property<int>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TaskFile", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<int>("FileId");

                    b.HasKey("TaskId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TaskFile");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TaskType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("TaskType");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TeacherGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<string>("TeacherId");

                    b.HasKey("GroupId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherGroup");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TeacherSubject", b =>
                {
                    b.Property<int>("SubjectId");

                    b.Property<string>("TeacherId");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubject");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Unit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("LevelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ScoreMin");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "LevelId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<string>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Admin", b =>
                {
                    b.HasBaseType("EducationManagement.Database.Models.User");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Student", b =>
                {
                    b.HasBaseType("EducationManagement.Database.Models.User");

                    b.Property<int>("GroupId");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Teacher", b =>
                {
                    b.HasBaseType("EducationManagement.Database.Models.User");

                    b.Property<string>("Qualifications");

                    b.ToTable("Teacher");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.File", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.FileType", "FileType")
                        .WithMany("File")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_File_FileType");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Group", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.SubjectLevel", "SubjectLevel")
                        .WithMany("Group")
                        .HasForeignKey("SubjectId", "LevelId")
                        .HasConstraintName("FK_Group_SubjectLevel");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Permission", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId1");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.StudentGroup", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Group", "Group")
                        .WithMany("StudentGroup")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_StudentGroup_Group");

                    b.HasOne("EducationManagement.Database.Models.Student", "Student")
                        .WithMany("StudentGroup")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentGroup_Student");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.StudentTask", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Student", "Student")
                        .WithMany("StudentTask")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentTask_Student");

                    b.HasOne("EducationManagement.Database.Models.Task", "Task")
                        .WithMany("StudentTask")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_StudentTask_Task");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.SubjectLevel", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Task", "EntryTask")
                        .WithMany("SubjectLevel")
                        .HasForeignKey("EntryTaskId")
                        .HasConstraintName("FK_SubjectLevel_Task");

                    b.HasOne("EducationManagement.Database.Models.Level", "Level")
                        .WithMany("SubjectLevel")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_SubjectLevel_Level");

                    b.HasOne("EducationManagement.Database.Models.Subject", "Subject")
                        .WithMany("SubjectLevel")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_SubjectLevel_Subject");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.SubjectLevelFile", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.File", "File")
                        .WithOne("SubjectLevelFile")
                        .HasForeignKey("EducationManagement.Database.Models.SubjectLevelFile", "FileId")
                        .HasConstraintName("FK_SubjectLevelFile_File");

                    b.HasOne("EducationManagement.Database.Models.SubjectLevel", "SubjectLevel")
                        .WithMany("SubjectLevelFiles")
                        .HasForeignKey("LevelId", "SubjectId")
                        .HasConstraintName("FK_SubjectLevelFile_SubjectLevel");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Task", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Teacher", "Creator")
                        .WithMany("Task")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Task_Teacher");

                    b.HasOne("EducationManagement.Database.Models.TaskType", "TaskType")
                        .WithMany("Task")
                        .HasForeignKey("TaskTypeId")
                        .HasConstraintName("FK_Task_TaskType");

                    b.HasOne("EducationManagement.Database.Models.Unit", "Unit")
                        .WithMany("Task")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Task_Unit");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TaskFile", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.File", "File")
                        .WithMany("TaskFile")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_TaskFile_File");

                    b.HasOne("EducationManagement.Database.Models.Task", "Task")
                        .WithMany("TaskFile")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskFile_Task");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TeacherGroup", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Group", "Group")
                        .WithMany("TeacherGroup")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_TeacherGroup_Group");

                    b.HasOne("EducationManagement.Database.Models.Teacher", "Teacher")
                        .WithMany("TeacherGroup")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherGroup_Teacher");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.TeacherSubject", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Subject", "Subject")
                        .WithMany("TeacherSubject")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_TeacherSubject_Subject");

                    b.HasOne("EducationManagement.Database.Models.Teacher", "Teacher")
                        .WithMany("TeacherSubject")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherSubject_Teacher");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.Unit", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.SubjectLevel", "SubjectLevel")
                        .WithMany("Unit")
                        .HasForeignKey("SubjectId", "LevelId")
                        .HasConstraintName("FK_Unit_SubjectLevel_Level");
                });

            modelBuilder.Entity("EducationManagement.Database.Models.User", b =>
                {
                    b.HasOne("EducationManagement.Database.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
